#!/usr/bin/env python
"""
Script para probar la funcionalidad de importaci√≥n de AniList con √©nfasis en espa√±ol
"""
import os
import sys
import django

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sugoianime.settings')
django.setup()

from myapp.anilist_api import anilist_api
from myapp.anilist_importer import anilist_importer

def test_busqueda_espa√±ol():
    """Probar b√∫squeda espec√≠fica en espa√±ol"""
    print("üá™üá∏ Probando b√∫squeda especializada en espa√±ol...")
    
    # T√©rminos de prueba en espa√±ol
    terminos_prueba = [
        "El Ataque de los Titanes",
        "One Piece en espa√±ol",
        "Naruto espa√±ol",
        "Dragon Ball",
        "Los Caballeros del Zod√≠aco"
    ]
    
    for termino in terminos_prueba:
        print(f"\n--- Buscando: {termino} ---")
        
        try:
            # Buscar usando el m√©todo especializado
            resultados = anilist_api.buscar_anime_espa√±ol(termino, per_page=5)
            
            print(f"Encontrados {len(resultados)} resultados:")
            
            for i, anime in enumerate(resultados[:3], 1):
                title = anime.get('title', {})
                synonyms = anime.get('synonyms', [])
                description = anime.get('description', '')[:100] + "..." if anime.get('description') else ""
                
                print(f"\n{i}. ID: {anime.get('id')}")
                print(f"   T√≠tulo Romaji: {title.get('romaji', 'N/A')}")
                print(f"   T√≠tulo Ingl√©s: {title.get('english', 'N/A')}")
                print(f"   T√≠tulo Nativo: {title.get('native', 'N/A')}")
                print(f"   Sin√≥nimos: {synonyms[:3] if synonyms else 'N/A'}")
                print(f"   Descripci√≥n: {description}")
                print(f"   Popularidad: {anime.get('popularity', 'N/A')}")
                print(f"   Score: {anime.get('averageScore', 'N/A')}")
                
                # Verificar indicadores de espa√±ol
                titulo_preferido = anilist_importer._obtener_titulo_preferido(title, synonyms)
                es_espa√±ol = anilist_importer._es_titulo_espa√±ol(titulo_preferido)
                print(f"   T√≠tulo preferido: {titulo_preferido}")
                print(f"   ¬øContiene espa√±ol?: {es_espa√±ol}")
                
        except Exception as e:
            print(f"Error al buscar '{termino}': {e}")

def test_importacion_espa√±ol():
    """Probar importaci√≥n con √©nfasis en espa√±ol"""
    print("\n\nüöÄ Probando importaci√≥n de contenido en espa√±ol...")
    
    termino_test = "Naruto"
    
    try:
        print(f"Importando contenido relacionado con: {termino_test}")
        contenidos = anilist_importer.buscar_e_importar_espa√±ol(termino_test, max_resultados=3)
        
        print(f"\n‚úÖ Importados {len(contenidos)} contenidos:")
        
        for contenido in contenidos:
            print(f"\n- {contenido.titulo}")
            print(f"  Tipo: {contenido.tipo}")
            print(f"  A√±o: {contenido.a√±o}")
            print(f"  AniList ID: {contenido.anilist_id}")
            print(f"  Score AniList: {contenido.anilist_score}")
            print(f"  Popularidad: {contenido.anilist_popularity}")
            print(f"  Descripci√≥n: {contenido.descripcion[:100]}...")
            
    except Exception as e:
        print(f"Error en importaci√≥n: {e}")

def test_detecci√≥n_espa√±ol():
    """Probar detecci√≥n de t√≠tulos en espa√±ol"""
    print("\n\nüîç Probando detecci√≥n de t√≠tulos en espa√±ol...")
    
    titulos_prueba = [
        "El Ataque de los Titanes",
        "Los Caballeros del Zod√≠aco",
        "Attack on Titan",
        "Shingeki no Kyojin",
        "Naruto: Shippuden",
        "Dragon Ball Z en Espa√±ol",
        "One Piece (Latino)",
        "ÈÄ≤ÊíÉ„ÅÆÂ∑®‰∫∫",
        "La Torre de Dios",
        "El Rey Demonio",
        "Kimetsu no Yaiba"
    ]
    
    for titulo in titulos_prueba:
        es_espa√±ol = anilist_importer._es_titulo_espa√±ol(titulo)
        estado = "‚úÖ S√ç" if es_espa√±ol else "‚ùå NO"
        print(f"{estado} - '{titulo}'")

if __name__ == "__main__":
    print("üéå Test de Funcionalidad AniList en Espa√±ol üá™üá∏")
    print("=" * 50)
    
    try:
        # Test 1: Detecci√≥n de espa√±ol
        test_detecci√≥n_espa√±ol()
        
        # Test 2: B√∫squeda especializada
        test_busqueda_espa√±ol()
        
        # Test 3: Importaci√≥n (comentado por defecto para evitar spam en BD)
        respuesta = input("\n¬øDesea probar la importaci√≥n real? (puede crear registros en la BD) [y/N]: ")
        if respuesta.lower() in ['y', 'yes', 's√≠', 's']:
            test_importacion_espa√±ol()
        else:
            print("Importaci√≥n saltada.")
        
        print("\nüéâ Pruebas completadas!")
        
    except Exception as e:
        print(f"\n‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()
